1. User Access & Roles
1.1. Access owner/pet pages as an anonymous user (should redirect or fail)
1.2. Access vet list without authentication (should succeed â€“ public)
1.3. Attempt to access admin-only pages without admin role (should be forbidden)
1.4. Authenticate as a valid user and access their data
1.5. Attempt login with invalid credentials (should fail)

2. Owner Registration & Management
2.1. Successfully register a new pet owner via form
2.2. Submit the registration form with missing fields (e.g., no telephone)
2.3. Submit invalid data formats (e.g., non-numeric phone)
2.4. Try to update an owner with mismatched form ID (should fail)
2.5. Ensure duplicate owners are handled properly

3. Pet Management
3.1. Add a new pet to an existing owner
3.2. Add a pet with missing fields (e.g., no name/type)
3.3. Update pet details (name, type, birthdate)
3.4. Try to edit a non-existent pet (should 404)
3.5. Add pet with a future birthdate (should fail validation)

4. Visit Scheduling
4.1. Add a visit to an existing pet
4.2. Attempt to add a visit with missing date or description
4.3. Ensure visits are linked to the correct pet
4.4. Add multiple visits and verify chronological ordering
4.5. Add a visit with excessively long description (test limits)

5. Vet Listing and Specialties
5.1. View vet list in HTML (UI)
5.2. Retrieve vet list in JSON format via /vets endpoint
5.3. Ensure each vet entry includes valid specialties
5.4. Test vet list pagination behavior
5.5. Attempt to fetch vets via malformed URL (expect 400 or 404)

6. Internationalization
6.1. Verify default locale strings appear in UI
6.2. Switch locale via query param (?lang=fr) and check translations
6.3. Check fallback behavior for missing translation keys
6.4. Ensure no hardcoded UI text remains untranslated

7. Exception Handling
7.1. Trigger known crash endpoint (/oups) and check HTML response
7.2. Trigger /oups and check JSON error structure
7.3. Trigger exception with HTML header (verify correct error template)
7.4. Check that unauthorized form submissions do not expose stack traces

8. Data Validation & Integrity
8.1. Reject form submissions with invalid characters (XSS test)
8.2. Prevent pet duplication (same name/type/date under same owner)
8.3. Ensure no SQL injection is possible via owner name or pet fields
8.4. Submit 100+ visits for a pet to test scalability and integrity

9. API/Controller Behavior
9.1. Return correct status codes (200 for success, 302 for redirects, etc.)
9.2. Verify model attributes are set for each controller method
9.3. Check that all forms include CSRF tokens
9.4. Send malformed POST data and ensure 400 is returned

10. Database & Transaction Consistency
10.1. Ensure DB rollback after failed insert (e.g., missing required fields)
10.2. Delete a pet and confirm related visits are deleted or orphaned properly
10.3. Simulate DB disconnect (e.g., drop connection) and ensure graceful fallback
10.4. Validate that owner and pet data stay consistent across updates