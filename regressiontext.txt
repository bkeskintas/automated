1. User Registration & Login
1.1. Successful registration with valid credentials
1.2. Attempt to register with an already taken username (should fail)
1.3. Successful login with correct username and password
1.4. Login attempt with incorrect username or password
1.5. Reject registration if the password is too short
1.6. Reject registration if the password lacks complexity (e.g., only letters)

2. Add Password Entry
2.1. Successfully add a password with valid inputs
2.2. Add a password for the same website and username (check if it updates or fails)
2.3. Attempt to add with missing fields (e.g., empty website)
2.4. Add with a very long note field
2.5. Add with special characters in username/password

3. Retrieve Passwords
3.1. Retrieve all passwords for a logged-in user
3.2. Return an empty list for a user with no passwords
3.3. Attempt to retrieve passwords without authentication (expect unauthorized)

4. Update Password Entry
4.1. Fully update an existing password entry
4.2. Try to update a non-existent password ID (expect 404)
4.3. Update only one field (e.g., just the note)
4.4. Try to update another user’s password (expect forbidden/unauthorized)

5. Delete Password Entry
5.1. Successfully delete an existing password
5.2. Ensure deleted password no longer appears in the list
5.3. Attempt to delete using a non-existent ID (expect 404)
5.4. Attempt to delete another user’s password (expect forbidden)

6. Session and Authentication
6.1. Perform authenticated operations after login
6.2. Ensure token expiration ends session
6.3. Try password operations without a token (should fail)
6.4. Attempt access with a tampered JWT token (should fail)

7. Data Integrity and Security
7.1. Ensure concurrent users don’t conflict with each other’s data
7.2. Prevent XSS attacks via note, website, or username inputs
7.3. Ensure resistance to SQL injection in all endpoints
7.4. Verify passwords are stored hashed in the database

8. Performance and Edge Cases
8.1. Test performance with 1000+ password entries
8.2. Test with very long notes, usernames, and passwords
8.3. Handle concurrent API calls without crashing
8.4. Ensure malformed requests don’t affect overall performance

9. API Response & Status Codes
9.1. Correct status codes for successful requests (200, 201)
9.2. Return 401 for unauthorized access attempts
9.3. Return 404 when resources are not found
9.4. Return 400 for invalid input or malformed requests

10. Database Consistency
10.1. Validate database state after each CRUD operation
10.2. Simulate database disconnect and ensure graceful error handling
10.3. Ensure all user data is removed upon account deletion



